package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"connectrpc.com/connect"
	"connectrpc.com/grpcreflect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"google.golang.org/protobuf/types/known/emptypb"

	usersv1 "github.com/az5840/connect-go-example/gen/users/v1"        // generated by protoc-gen-go
	"github.com/az5840/connect-go-example/gen/users/v1/usersv1connect" // generated by protoc-gen-connect-go

	connectcors "connectrpc.com/cors"
	"github.com/rs/cors"
)

type UsersService struct {
	usersv1connect.UnimplementedUsersServiceHandler
	savedPersons []*usersv1.GetUserResponse // read-only after initialized
}

// CreateUser implements usersv1connect.UsersServiceHandler.
func (u *UsersService) CreateUser(ctx context.Context, stream *connect.ClientStream[usersv1.CreateUserRequest]) (*connect.Response[emptypb.Empty], error) {
	if err := ctx.Err(); err != nil {
		return nil, err // automatically coded correctly
	}
	for stream.Receive() {
		u.savedPersons = append(u.savedPersons, (*usersv1.GetUserResponse)(stream.Msg()))
	}
	return &connect.Response[emptypb.Empty]{}, nil
}

// GetUsers implements usersv1connect.UsersServiceHandler.
func (u *UsersService) GetUsers(ctx context.Context, req *connect.Request[emptypb.Empty], stream *connect.ServerStream[usersv1.GetUsersResponse]) error {
	if err := ctx.Err(); err != nil {
		return err // automatically coded correctly
	}
	for _, user := range u.savedPersons {
		if err := stream.Send((*usersv1.GetUsersResponse)(user)); err != nil {
			return connect.NewError(connect.CodeInternal, err)
		}
	}
	return nil
}

func (u *UsersService) GetUser(ctx context.Context, req *connect.Request[usersv1.GetUserRequest]) (*connect.Response[usersv1.GetUserResponse], error) {
	//log.Println("Request headers: ", req.Header())
	fmt.Println(req.Header().Get("Acme-Tenant-Id"))
	user := *u.savedPersons[req.Msg.Id-1]
	res := connect.NewResponse(&user)
	res.Header().Set("Users-Version", "v1")
	return res, nil

}

func main() {
	usersservice := &UsersService{
		savedPersons: exampleData,
	}
	mux := http.NewServeMux()
	reflector := grpcreflect.NewStaticReflector(
		"acme.user.v1.UserService",
		"acme.group.v1.GroupService",
		// protoc-gen-connect-go generates package-level constants
		// for these fully-qualified protobuf service names, so you'd more likely
		// reference userv1.UserServiceName and groupv1.GroupServiceName.
	)
	mux.Handle(grpcreflect.NewHandlerV1(reflector))
	mux.Handle(grpcreflect.NewHandlerV1Alpha(reflector))
	path, handler := usersv1connect.NewUsersServiceHandler(usersservice)
	handler = withCORS(handler)
	mux.Handle(path, handler)
	log.Println("Server start on port 8080")
	if err := http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	); err != nil {
		log.Fatalf("Start server failed whith err:%v", err)
	}

}

// withCORS adds CORS support to a Connect HTTP handler.
func withCORS(h http.Handler) http.Handler {
	middleware := cors.New(cors.Options{
		AllowedOrigins: []string{"example.com"},
		AllowedMethods: connectcors.AllowedMethods(),
		AllowedHeaders: connectcors.AllowedHeaders(),
		ExposedHeaders: connectcors.ExposedHeaders(),
	})
	return middleware.Handler(h)

}

var exampleData = []*usersv1.GetUserResponse{
	{Name: "Juan", Id: 1, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
	{Name: "Gabriel", Id: 2, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
	{Name: "Albert", Id: 3, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
	{Name: "Mark", Id: 4, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
	{Name: "Brian", Id: 5, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
	{Name: "Kevin", Id: 6, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
	{Name: "Ryan", Id: 7, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
	{Name: "May", Id: 8, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
	{Name: "Rosario", Id: 9, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
	{Name: "Argentina", Id: 10, Age: 52, Status: usersv1.UserStatus_USER_STATUS_AVAILABLE},
}
